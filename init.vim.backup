" How to use this file ?? 
" Put this in neovim config folder like $HOME/.config/nvim for linux.
" Open neovim and type :PlugInstall, wait a little bit, type :PlugUpdate.
"i Specify a directory for plugins
call plug#begin('~/.vim/plugged')

Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'preservim/nerdtree'
Plug 'tsony-tsonev/nerdtree-git-plugin'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
Plug 'ryanoasis/vim-devicons'
Plug 'airblade/vim-gitgutter'
Plug 'ctrlpvim/ctrlp.vim' " fuzzy find files
Plug 'scrooloose/nerdcommenter'
Plug 'prettier/vim-prettier', {
  \ 'do': 'yarn install --frozen-lockfile --production',
  \ 'branch': 'release/0.x'
  \ }
Plug 'ryanoasis/vim-devicons'
Plug 'morhetz/gruvbox'
Plug 'nvim-lua/plenary.nvim'
Plug 'HerringtonDarkholme/yats.vim' " TS Syntax
" ---------------- MY CUSTOME PLUG -------------------
Plug 'mattn/emmet-vim'
Plug 'nvim-telescope/telescope.nvim', { 'tag': '0.1.1' }
Plug 'nvim-lua/popup.nvim'
Plug 'nvim-telescope/telescope-fzy-native.nvim'
Plug 'nvim-telescope/telescope-project.nvim'

Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
" For debug program
Plug 'mfussenegger/nvim-dap'
Plug 'Pocco81/dap-buddy.nvim'
Plug 'rcarriga/nvim-dap-ui'
Plug 'catppuccin/nvim', { 'as': 'catppuccin' }
Plug 'folke/tokyonight.nvim', { 'branch': 'main' }
Plug 'arcticicestudio/nord-vim'
Plug 'dylanaraps/wal'

Plug 'bfrg/vim-cpp-modern'
" File structure quick view 
Plug 'liuchengxu/vista.vim'
" Like vista but not base on LSP
Plug 'preservim/tagbar'
" Change UI
Plug 'Yggdroot/indentLine'
" Underline the same word
Plug 'RRethy/vim-illuminate'
" Highlight base on cursor focus word
Plug 'luochen1990/rainbow'
Plug 'SirVer/ultisnips'

Plug 'lervag/vimtex'
Plug 'christoomey/vim-tmux-navigator'
Plug 'derekwyatt/vim-fswitch'

" Decorate the bottom bar
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
" Plug 'chrisbra/Colorizer'
Plug 'norcalli/nvim-colorizer.lua'
Plug 'mg979/vim-visual-multi'
Plug 'machakann/vim-highlightedyank'
" Plug 'davidhalter/jedi-vim'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-commentary'

" Md preview
Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() } }

Plug 'kyazdani42/nvim-tree.lua'


" ----------------END PERSIONAL PLUG------------------
" Initialize plugin system
call plug#end()
inoremap jk <ESC>

nnoremap <silent> <C-m> :NvimTreeToggle<CR>


" Set NERDTree options
let g:NERDTreeChDirMode = 0 " Do not change the current working directory
let g:NERDTreeAutoDeleteBuffer = 1 " Automatically delete empty buffers when NERDTree is open and the buffer is abandoned
let g:NERDTreeShowHidden = 1 " Show hidden files and directories
let g:NERDTreeMinimalUI = 1 " Hide status bar and line numbers when NERDTree is open
"let g:NERDTreeIgnore = ['\.pyc$', '\.swp$', '\.git$', '__pycache__'] " Ignore files matching these patterns

" Highlight NERDTree directory nodes and update the statusline with the current file path
" autocmd FileType nerdtree highlight NonText guifg=gray autocmd FileType nerdtree setlocal statusline=%<%f\ %h%m%r%=%-14.(%l,%c%V%)\ %P


let g:WebDevIconsUnicodeDecorateFolderNodes = 1


" vim-prettier
"let g:prettier#quickfix_enabled = 0
"let g:prettier#quickfix_auto_focus = 0
" prettier command for coc
command! -nargs=0 Prettier :CocCommand prettier.formatFile
" run prettier on save
 let g:prettier#autoformat = 0
"autocmd BufWritePre *.js,*.jsx,*.mjs,*.ts,*.tsx,*.css,*.less,*.scss,*.json,*.graphql,*.md,*.vue,*.yaml,*.html PrettierAsync


" ctrlp
let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']

" j/k will move virtual lines (lines that wrap)
noremap <silent> <expr> j (v:count == 0 ? 'gj' : 'j')
noremap <silent> <expr> k (v:count == 0 ? 'gk' : 'k')

set relativenumber

set smarttab
set cindent
set tabstop=2
set shiftwidth=2
" always uses spaces instead of tab characters
set expandtab

colorscheme catppuccin-latte

" Light them catppuccin-latte
" Dark them catppuccin-macchiato
" catppuccin-latte, catppuccin-frappe, catppuccin-macchiato, catppuccin-mocha

" coc config
let g:coc_global_extensions = [
  \ 'coc-snippets',
  \ 'coc-pairs',
  \ 'coc-tsserver',
  \ 'coc-eslint', 
  \ 'coc-prettier', 
  \ 'coc-json', 
  \ 'coc-html',
  \ 'coc-css',
  \ 'coc-clangd',
  \ 'coc-stylelint',
  \ 'coc-markdownlint',
  \ 'coc-tabnine',
  \ 'coc-sh',
  \ 'coc-texlab',
  \ 'coc-vimtex',
  \ 'coc-vimlsp',
  \ 'coc-pyright',
  \ 'coc-git',
  \ 'coc-highlight',
  \ 'coc-spell-checker'
  \ ]
" from readme
" if hidden is not set, TextEdit might fail.
set hidden " Some servers have issues with backup files, see #649 set nobackup set nowritebackup " Better display for messages set cmdheight=2 " You will have bad experience for diagnostic messages when it's default 4000.
set updatetime=300

" don't give |ins-completion-menu| messages.
set shortmess+=c

" always show signcolumns
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
" Or use `complete_info` if your vim support it, like:
" inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
" Open definition in a split window
nmap <silent> gv :vsp<CR><Plug>(coc-definition)<C-W>L


" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word
nmap <F2> <Plug>(coc-rename)

" Remap for format selected region
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap for do codeAction of current line
nmap <leader>ac  <Plug>(coc-codeaction)
" Fix autofix problem of current line
nmap <leader>qf  <Plug>(coc-fix-current)

" Create mappings for function text object, requires document symbols feature of languageserver.
xmap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap if <Plug>(coc-funcobj-i)
omap af <Plug>(coc-funcobj-a)

" Use <C-d> for select selections ranges, needs server support, like: coc-tsserver, coc-python
nmap <silent> <C-d> <Plug>(coc-range-select)
xmap <silent> <C-d> <Plug>(coc-range-select)

" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')

" Use `:Fold` to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" use `:OR` for organize import of current buffer
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add status line support, for integration with other plugin, checkout `:h coc-status`
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Using CocList
" Show all diagnostics
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions
nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" Show commands
nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list
nnoremap <silent> <space>p  :<C-u>CocListResume<CR>


" Find files using Telescope command-line sugar.
nnoremap <leader>ff <cmd>Telescope find_files<cr>
nnoremap <leader>fg <cmd>Telescope live_grep<cr>
nnoremap <leader>fb <cmd>Telescope buffers<cr>
nnoremap <leader>fh <cmd>Telescope help_tags<cr>

" Using Lua functions
nnoremap <leader>ff <cmd>lua require('telescope.builtin').find_files()<cr>
nnoremap <leader>fg <cmd>lua require('telescope.builtin').live_grep()<cr>
nnoremap <leader>fb <cmd>lua require('telescope.builtin').buffers()<cr>
nnoremap <leader>fh <cmd>lua require('telescope.builtin').help_tags()<cr>


" ------------- MY CUSTOME --------------------------------

set encoding=utf-8 " The encoding used
set termguicolors " Use 24-bit RGB colors instead of 256-colors

" Map emmet C+y+, type twice ","  to complete the tag in html 
let g:user_emmet_leader_key=','
let g:user_emmet_mode='i'
" Enables the clipboard between Vim/Neovim and other applications
set clipboard=unnamedplus
" Airline config
let g:airline_theme='onedark'

" Disable emmet when not use file suffic html, php 
autocmd FileType html,php let g:user_emmet_mode='disabled'
" Compile program with F4
autocmd filetype python nnoremap <F4> :w <bar> exec '!python3 '.shellescape('%')<CR>
autocmd filetype c nnoremap <F4> :w <bar> exec '!gcc '.shellescape('%').' -o '.shellescape('%:r').' && ./'.shellescape('%:r')<CR>
autocmd filetype cpp nnoremap <F4> :w <bar> exec '!g++ '.shellescape('%').' -o '.shellescape('%:r').' && ./'.shellescape('%:r')<CR>
autocmd filetype sh nnoremap <F4> :w <bar> exec '!bash '.shellescape('%')<CR>
autocmd filetype javascript nnoremap <F4> :w <bar> exec '!node '.shellescape('%')<CR>
autocmd FileType html map <F4> :w<CR>:!firefox % & disown<CR>

" Save file the traditional way
imap <C-s> <esc> :w <cr>
nmap <C-s> :w <cr>
" Find the same word for current buffer
nnoremap <leader>F :let @/=''\|call inputsave()\|let @/ = input('Search: ')\|call inputrestore()<CR>1
" Increase all the number in line also work for multiline select in visual mode 
nnoremap <A-4> :s/\d\+/\=submatch(0)+1/g<CR>
vnoremap <A-4> :s/\d\+/\=submatch(0)+1/g<CR>gv

" Change function define to prototype and put definition to the end of file 
nnoremap <A-3> :w<CR>yypk$r;o<ESC>j$%o<ESC>k%dip<ESC>Go<ESC>p<C-O>kk:w<CR>
" This is the same but for deal with the case one line function 
nnoremap <A-2> :w<CR>f{a<Return><ESC>kyypk$r;o<ESC>j$%o<ESC>k%dip<ESC>Go<ESC>p<C-O>kk:w<CR>


" Template
autocmd BufNewFile *.py 0r ~/.config/nvim/templates/python.tpl
autocmd BufNewFile *.cpp 0r ~/.config/nvim/templates/cpp.tpl
autocmd BufNewFile *.c 0r ~/.config/nvim/templates/c.tpl
autocmd BufNewFile *.sh 0r ~/.config/nvim/templates/sh.tpl
autocmd BufNewFile KREADME.md 0r ~/.config/nvim/templates/readme.tpl
autocmd BufNewFile reset.css 0r ~/.config/nvim/templates/normalize.css
autocmd BufNewFile style.css 0r ~/.config/nvim/templates/cayman.css
autocmd BufNewFile color.css   0r ~/.config/nvim/templates/custom-color.css

" Move line around 
nnoremap <S-Up> :m-2<CR>
nnoremap <A-S-k> :m-2<CR>
nnoremap <S-Down> :m+<CR>
nnoremap <A-S-j> :m+<CR>
inoremap <S-Up> <Esc>:m-2<CR>
inoremap <A-S-k> <Esc>:m-2<CR>
inoremap <S-Down> <Esc>:m+<CR>
inoremap <A-S-j> <Esc>:m+<CR>

" Md preview
autocmd FileType markdown nnoremap <F4> :MarkdownPreview<CR>


lua << EOF
require'colorizer'.setup()

-- This is nvimtree.lua config file 
local options = {
  -- The content of your `nvimtree.lua` file goes here
    filters = {
    dotfiles = false,
    exclude = { vim.fn.stdpath "config" .. "/lua/custom" },
  },
  disable_netrw = true,
  hijack_netrw = true,
  hijack_cursor = true,
  hijack_unnamed_buffer_when_opening = false,
  sync_root_with_cwd = true,
  update_focused_file = {
    enable = true,
    update_root = false,
  },
  view = {
    adaptive_size = false,
    side = "left",
    width = 30,
    preserve_window_proportions = true,
  },
  git = {
    enable = false,
    ignore = true,
  },
  filesystem_watchers = {
    enable = true,
  },
  actions = {
    open_file = {
      resize_window = true,
    },
  },
  renderer = {
    root_folder_label = false,
    highlight_git = false,
    highlight_opened_files = "none",

    indent_markers = {
      enable = false,
    },

    icons = {
      show = {
        file = true,
        folder = true,
        folder_arrow = true,
        git = false,
      },

      glyphs = {
        default = "󰈚",
        symlink = "",
        folder = {
          default = "",
          empty = "",
          empty_open = "",
          open = "",
          symlink = "",
          symlink_open = "",
          arrow_open = "",
          arrow_closed = "",
        },
        git = {
          unstaged = "✗",
          staged = "✓",
          unmerged = "",
          renamed = "➜",
          untracked = "★",
          deleted = "",
          ignored = "◌",
        },
      },
    },
  },

}

require("nvim-tree").setup(options)




EOF



" ----------------END CUSTOME CONFIG-----------------
" Credit for some setup below: https://idie.ru/posts/vim-modern-cpp/
" ----------------Copy config------------------------
" Setup cppman 
function! s:JbzCppMan()
    let old_isk = &iskeyword
    setl iskeyword+=:
    let str = expand("<cword>")
    let &l:iskeyword = old_isk
    execute 'Man ' . str
endfunction
command! JbzCppMan :call s:JbzCppMan()
" Map T for show cppman for keyword
au FileType cpp nnoremap T :JbzCppMan<CR>
" Additional syntax highlight 
let g:cpp_member_highlight = 1
" Remove all trailing whitespaces
nnoremap <silent> <leader>rs :let _s=@/ <Bar> :%s/\s\+$//e <Bar> :let @/=_s <Bar> :nohl <Bar> :unlet _s <CR>
" Vista neovim file structure
function! NearestMethodOrFunction() abort
  return get(b:, 'vista_nearest_method_or_function', '')
endfunction
set statusline+=%{NearestMethodOrFunction()}
" User Alt + 6 to open filestructure
nnoremap <silent> <A-6> :Vista!!<CR>
" Setting indentLine
let g:indentLine_char_list = ['|', '¦', '┆', '┊']

let g:rainbow_active = 0 "0 if you want to enable it later via :RainbowToggle
nmap <silent> <A-5> :RainbowToggle<CR>

" Snipet
let g:UltiSnipsExpandTrigger = '<tab>'
let g:UltiSnipsJumpForwardTrigger = '<tab>'
let g:UltiSnipsJumpBackwardTrigger = '<s-tab>'

let g:tex_flavor='latex'
let g:vimtex_view_method='zathura'
let g:vimtex_quickfix_mode=0
set conceallevel=1
let g:tex_conceal='abdmg'

" Tagbar
nmap <A-7> :TagbarToggle<CR>


autocmd FileType c,cpp setlocal cinoptions+=g0

" Switch between header file  and source 
au BufEnter *.h  let b:fswitchdst = "c,cpp,cc,m"
au BufEnter *.cc let b:fswitchdst = "h,hpp"
let g:colorizer_enable = 1
filetype plugin on


" -------------------End copy config--------------------
" ------- END PERSIONAL CUSTOME ---------------------------
