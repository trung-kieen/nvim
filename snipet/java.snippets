# Quick guide in nvim/.ultisnip/README.md
snippet input "Remind to import java.util.Scanner;"  b
Scanner scanner =  new Scanner(System.in);
endsnippet	
snippet import-scanner "Description" b
import java.util.Scanner;
endsnippet
snippet array-initialization "Create a new array" b
String[] cars = {"Volvo", "BMW", "Ford", "Mazda"};	
endsnippet
snippet array-build "Abstract array contain many method to work with list" b
ArrayList<${1:Integer}> integers = new ArrayList<>();
list.add(4);
endsnippet

snippet import-ArrayList "Description" b
import java.util.ArrayList;
endsnippet

snippet array-hellper "Like vector in cpp and link list in Python this will allow us use dynamic array" b

ArrayList<String> lines = new ArrayList<>();
endsnippet

snippet swing-launcher "File to run swing gui it mean run a ui application" 
import  javax.swing.*;
public class ${1:AppLauncher} {
    public static  void main(String args[]){
    SwingUtilities.invokeLater(new Runnable() {
        @Override
        public void run() {
            new AppGui().setVisible(true);
        }
    });
    }

}
endsnippet
snippet JFrame-setup "Setup base for gui application" 
import javax.swing.*;

public class ${1:AppGui}  extends JFrame {
    public  AppGui() {

        super("My weather app");
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        // setSize(450, 650);
        setLocationRelativeTo(null);
        setLayout(null);
        setResizable(false);
    }
}
endsnippet

snippet read-file-csv "Read file by line and split into 2 string base on comma" 
// TODO: Add these two line to header  ${0}
import java.util.Scanner;
import java.nio.file.Paths;
try (Scanner scanner = new Scanner(Paths.get("records.txt"))) {
    while (scanner.hasNextLine()) {
        String line = scanner.nextLine();
        String[] parts = line.split(",");
        String name = parts[0];
        int age = Integer.valueOf(parts[1]);
        people.add(new Person(name, age));
    }
}
endsnippet
snippet typeCastIntegerHandler "With handle exception" b
int foo;
try {
   foo = Integer.parseInt(myString);
}
catch (NumberFormatException e) {
   foo = 0;
}
endsnippet

snippet typeCastInteger "Without handle exception" b
String myString = "1234";
int foo = Integer.parseInt(myString);
endsnippet

snippet arryaListPrint "Print all value int array" b
myList.stream().forEach(System.out::println);
endsnippet

snippet colectionSum "Handle collection value" b
int sum = numbers.stream().mapToInt(s -> Integer.valueOf(s)).sum();
endsnippet


snippet collectionToCollection "Handle collection value and make result to a new collection" b
ArrayList<Integer> positives = values.stream()
    .filter(value -> value > 0)
    .collect(Collectors.toCollection(ArrayList::new));
endsnippet

